---
title: "Testing in R worksheet"
format: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Welcome to the testing in R worksheet! 
This is designed to give you some hands-on practice with testing syntax in R.
Run the cell below to load the libraries needed for this worksheet, 
and to check your answers as you go!

```{r}
library(digest)
library(rlang)
library(testthat)
library(tidyverse)
```

### Exercise 1
rubric={autograde:1}

Write a function called `mpg_to_kml` that takes a vector of numbers in miles per gallon units and converts it to a vector in kilometeres per litre.

*Hint: 1 mile per gallon is 0.425144 kilometres per litre.*

```{r tags=c()}
mpg_to_kml <- NULL

mpg_to_kml(1)
```

```{r}
. = ottr::check("tests/e1.R")
```

### Exercise 2 (not graded)

*Solution posted at end of worksheet.*

Write **at least** two {testthat} `expect_equal` tests inside of an `test_that` statement to ensure that your function works as expected (i.e., do you get back expected values given your input values - is the math correct?).

*Hint: test edge cases that you can compute by hand, and be sure of your answer!*

<img src="img/unit-tests.png" width=350>

*Source: Austin Powers + http://www.quickmeme.com/meme/3ua14n*

```{r tags=c()}
# YOUR CODE HERE
```

### Exercise 3
rubric={autograde:1}

Add exceptions to your `mpg_to_kml` function so that you can handle inappropriate user input, such as character vectors, lists or data frames.

<img src="img/fail-you-will-fail-fast-you-should.jpg" width=300>

*Source: Star Wars + https://memegenerator.net/*

```{r tags=c()}
# YOUR CODE HERE
```

```{r}
. = ottr::check("tests/e3.R")
```

### Exercise 4 (not graded)

*Solution posted at end of worksheet.*

Now write **at least** two {testthat} `expect_error` tests inside of an `test_that` statement to ensure that your function works as expected (i.e., does your function throw errors when incorrect inputs are given?).

```{r tags=c()}
# YOUR CODE HERE
```

### Exercise 5 (not graded)

*Solution posted at end of worksheet.*

Now write {roxygen2} style documentation for your function!

```{r tags=c()}
# YOUR CODE HERE
```


### Exercise 6

*Solution posted at end of worksheet.*

Writing functions with `tidyverse` functions that take in unquoted column names
requires an extra step - handling the unquoted column names being passed into, 
and used in the function (indirection). 
The issue is that when we are doing this, we are somewhat treating them as 
things that the global environment knows about, however they are not.
To deal with this, one approach we can use is to use the `{{` (called curly-curly)
operator to tell R that these are indeed column names 
that need to be evaluated in the context of the data frame, 
and not the global environment. 
Note - this operator only works with `tidyverse` functions and other strategies
are needed for dealing with unquoted column names with non-tidyverse functions
(see the [Metaprogramming chapter](https://adv-r.hadley.nz/metaprogramming.html)
of Advanced R if you are interested in knowing more about this topic).

Let's practice using this operator! 
The `get_rectangle` function shown below 
does not work for unquoted column names. 
Use the `{{` operator to embrace the column names/user inputs given by the user 
so that the function works as described:

```
#' Get smaller rectangle from a bigger data frame
#' 
#' `get_rectangle` subsets a data frame using filter and select syntax.
#'
#' @param data A data frame to subset
#' @param row_filter filter logical syntax used to filter rows, column name should be unquoted.
#' @param column_range select syntax (single column or range via `col1:coln`) to 
#' select columns, default is everything
#'
#' @return A smaller/subsetted data frame
#' @export
#'
#' @examples
#' library(palmerpenguins)
#' get_rectangle(mtcars, mpg > 20, vs:carb)
get_rectangle <- function(data, row_filter, column_range = everything()) {
    data |> 
        filter(row_filter) |> 
        select(column_range)
}
```

*Hint: embracing works for more than just a column name - you can even embrace a variable that will hold a filter logical statement (e.g., `body_mass_g > 3000`).*

### Exercise 7

*Solution posted at end of worksheet.*

Another issue with unquoted column names arises when we are making new columns 
in a data frame, for example as done when we use the `mutate` function. 
Here we need more than just `{{`, we need to change `=` to `:=` 
(this one is called the walrus operator).
It performs a similar role to `{{`, 
indicating to R that we are using unquoted column names in indirection,
**and** in this case creating a new column name.

Let's practice using this operator! 
The `group_summary` shown below does not work. 
Your task is to identify why and fix it so that the function works as described:

```
#' Summarize groups
#'
#' @param data A data frame
#' @param group A column to group by. Column name should be unquoted.
#' @param col A column to summarize. Column name should be unquoted.
#' @param fun A function to summarize the `col` by.
#'
#' @return A new data frame with the summarized value for each group.
#' @export
#'
#' @examples
group_summary(mtcars, cyl, hp, mean)
group_summary <- function(data, group, col, fun) {
    data %>% 
        group_by(group) %>% 
        summarise(col = fun(col))
}
```

```{r tags=c()}
# YOUR CORRECTED CODE HERE

group_summary(mtcars, cyl, hp, mean)
```

```{r}
. = ottr::check("tests/e7.R")
```

> ### Exercise 2 solution
>
>```
>test_that('1 mile per gallon is should be 0.425144 kilometres per litre', {
>    expect_equal(mpg_to_kml(1), 0.425144)
>    expect_equal(mpg_to_kml(2), 0.850288)
>    expect_equal(mpg_to_kml(10), 4.25144)
>})
>```

> ### Exercise 4 solution
>
>```
>test_that('errors should be thrown when non-numeric vectors, lists or data frames are given to the function', {
>    expect_error(mpg_to_kml("A"))
>    expect_error(mpg_to_kml(list(1, 2)))
>    expect_error(mpg_to_kml(data.frame(x = c(1))))
>})
>```

>### Exercise 5 solution
>
> Roxygen2 comments only:
>
>```
>#' Miles per gallon to kilometres per litre
>#'
>#' Convert a fuel efficiency from miles per gallon to kilometres per litre.
>#'
>#' @param x numeric
>#'
>#' @return numeric
>#' @export
>#'
>#' @examples
>#' mpg_to_kml(1)
>```

>### Exercise 6 solution
>```
>#' Get smaller rectangle from a bigger data frame
>#' 
>#' `get_rectangle` subsets a data frame using filter and select syntax.
>#'
>#' @param data A data frame to subset
>#' @param row_filter filter logical syntax used to filter rows, column name should be unquoted.
>#' @param column_range select syntax (single column or range via `col1:coln`) to 
>#' select columns, default is everything
>#'
>#' @return A smaller/subsetted data frame
>#' @export
>#'
>#' @examples
>#' library(palmerpenguins)
>#' get_rectangle(penguins, body_mass_g > 3000, species:island)
>get_rectangle <- function(data, row_filter, column_range = everything()) {
>    data |> 
>        filter({{ row_filter }} ) |> 
>        select({{ column_range}} )
>}
>```

>### Exercise 7 solution
>
>```
>#' Nest data and count observations in each group
>#'
>#' @param data A data frame
>#' @param nest_by A column to group by. Column name should be unquoted.
>#' @param col_name A new column name for the count column. Column name should be unquoted.
>#'
>#' @return A data frame where the data, other than the group specified in 
>#' `nest_by`, is nested. The number of rows for each data frame in the list
>#' column is given in a column whose name is specified by the user.
>#' @export
>#'
>#' @examples
>#' library(palmerpenguins)
>
>#' Summarize groups
>#'
>#' @param data A data frame
>#' @param group A column to group by. Column name should be unquoted.
>#' @param col A column to summarize. Column name should be unquoted.
>#' @param fun A function to summarize the `col` by.
>#'
>#' @return A new data frame with the summarized value for each group.
>#' @export
>#'
>#' @examples
>group_summary(mtcars, cyl, hp, mean)
>group_summary <- function(data, group, col, fun) {
>    data %>% 
>        group_by({{ group }}) %>% 
>        summarise( {{ col }} := fun({{ col }}))
>}
>```
